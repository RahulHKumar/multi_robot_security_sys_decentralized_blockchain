// Generated by gencpp from file security_decentralize_pkg/block2.msg
// DO NOT EDIT!


#ifndef SECURITY_DECENTRALIZE_PKG_MESSAGE_BLOCK2_H
#define SECURITY_DECENTRALIZE_PKG_MESSAGE_BLOCK2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace security_decentralize_pkg
{
template <class ContainerAllocator>
struct block2_
{
  typedef block2_<ContainerAllocator> Type;

  block2_()
    : robot_hash()  {
    }
  block2_(const ContainerAllocator& _alloc)
    : robot_hash(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _robot_hash_type;
  _robot_hash_type robot_hash;





  typedef boost::shared_ptr< ::security_decentralize_pkg::block2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::security_decentralize_pkg::block2_<ContainerAllocator> const> ConstPtr;

}; // struct block2_

typedef ::security_decentralize_pkg::block2_<std::allocator<void> > block2;

typedef boost::shared_ptr< ::security_decentralize_pkg::block2 > block2Ptr;
typedef boost::shared_ptr< ::security_decentralize_pkg::block2 const> block2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::security_decentralize_pkg::block2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::security_decentralize_pkg::block2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::security_decentralize_pkg::block2_<ContainerAllocator1> & lhs, const ::security_decentralize_pkg::block2_<ContainerAllocator2> & rhs)
{
  return lhs.robot_hash == rhs.robot_hash;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::security_decentralize_pkg::block2_<ContainerAllocator1> & lhs, const ::security_decentralize_pkg::block2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace security_decentralize_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::security_decentralize_pkg::block2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::security_decentralize_pkg::block2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::security_decentralize_pkg::block2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::security_decentralize_pkg::block2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::security_decentralize_pkg::block2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::security_decentralize_pkg::block2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::security_decentralize_pkg::block2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df6427b3d0603bcc36155fb56a25758c";
  }

  static const char* value(const ::security_decentralize_pkg::block2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf6427b3d0603bccULL;
  static const uint64_t static_value2 = 0x36155fb56a25758cULL;
};

template<class ContainerAllocator>
struct DataType< ::security_decentralize_pkg::block2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "security_decentralize_pkg/block2";
  }

  static const char* value(const ::security_decentralize_pkg::block2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::security_decentralize_pkg::block2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String robot_hash\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::security_decentralize_pkg::block2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::security_decentralize_pkg::block2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_hash);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct block2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::security_decentralize_pkg::block2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::security_decentralize_pkg::block2_<ContainerAllocator>& v)
  {
    s << indent << "robot_hash: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_hash);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECURITY_DECENTRALIZE_PKG_MESSAGE_BLOCK2_H
